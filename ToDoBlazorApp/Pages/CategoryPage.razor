@page "/categorypage"
@using ToDoBlazorApp.Data;
@using ToDoBlazorApp.Models;
@using ToDoBlazorApp.Services.Abstract;
@inject ICategoryService CategoryService
@attribute [Authorize]


<div class="page-header">
    <h3>CATEGORY PAGE</h3>
</div>
<DxGrid @ref="Grid"
        Data="categories"
        PageSize="5"
        EditMode="GridEditMode.EditForm"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="CategoryName" MinWidth="80" />
        <DxGridDataColumn FieldName="Description" MinWidth="80" />
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var category = (CategoryModel)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="Category Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("CategoryName")
                <ValidationMessage For="@(() => category.CategoryName)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Description:" ColSpanMd="6">
                @EditFormContext.GetEditor("Description")
                <ValidationMessage For="@(() => category.Description)" />
            </DxFormLayoutItem>

        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>


@code {

    List<CategoryModel> categories;
    IGrid Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var categoryModel = (CategoryModel)e.EditModel;

        if (e.IsNew)
            await CategoryService.AddCategoryAsync(categoryModel);
        else
            await CategoryService.UpdateCategoryAsync(((CategoryModel)e.DataItem).Id, categoryModel);

        categories = await CategoryService.GetAllCategoriesAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        bool result = await CategoryService.DeleteCategoryAsync(((CategoryModel)e.DataItem).Id);
        categories = await CategoryService.GetAllCategoriesAsync();
    }


}
<style>
  /*   .dxbl-grid {
        Width: 50%;
    } */

    .page-header {
        text-align: center;
        margin-bottom: 20px;
    }
</style>

