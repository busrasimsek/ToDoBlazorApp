@page "/productpage"
@using ToDoBlazorApp.Data;
@using ToDoBlazorApp.Models;
@using Microsoft.EntityFrameworkCore
@using ToDoBlazorApp.Services.Abstract;
@inject IProductService ProductService
@inject ICategoryService CategoryService
@attribute [Authorize]

<DxGrid @ref="Grid"
        Data="products"
        PageSize="5"
        EditMode="GridEditMode.EditForm"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Name" MinWidth="80" />
        <DxGridDataColumn FieldName="Price" MinWidth="80" />
        <DxGridDataColumn FieldName="StockQuantity" MinWidth="80" />
        <DxGridDataColumn FieldName="CategoryName" MinWidth="80" />
        <DxGridDataColumn FieldName="Description" MinWidth="80" />
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var product = (ProductModel)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">

            <DxFormLayoutItem Caption="Product Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("Name")
                <ValidationMessage For="@(() => product.Name)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Price:" ColSpanMd="6">
                <DxSpinEdit @bind-Value="product.Price"/>
                <ValidationMessage For="@(() => product.Price)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Stock Quantity:" ColSpanMd="6">
                <DxSpinEdit @bind-Value="product.StockQuantity" />
                <ValidationMessage For="@(() => product.StockQuantity)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Category Name:" ColSpanMd="6">
                <DxComboBox Data="@categories"
                            NullText="Select Category..."
                            @bind-Value="@product.CategoryId"
                            ValueFieldName="Id"
                            TextFieldName="@nameof(ProductModel.CategoryName)"
                            DropDownWidthMode="DropDownWidthMode.ContentOrEditorWidth" />
                <ValidationMessage For="@(() => product.CategoryName)" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Description:" ColSpanMd="6">
                @EditFormContext.GetEditor("Description")
                <ValidationMessage For="@(() => product.Description)" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {

    private List<ProductModel> products;
    private List<CategoryModel> categories;
    CategoryModel SelectedCategory { get; set; }
    private IGrid Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
        categories = await CategoryService.GetAllCategoriesAsync();
        SelectedCategory = categories.FirstOrDefault();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var productModel = (ProductModel)e.EditModel;

        if (e.IsNew)
        {

            await ProductService.AddProductAsync(productModel);

        }
        else
            await ProductService.UpdateProductAsync(((ProductModel)e.DataItem).Id, productModel);

        products = await ProductService.GetAllProductsAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        bool result = await ProductService.DeleteProductAsync(((ProductModel)e.DataItem).Id);
        products = await ProductService.GetAllProductsAsync();
    }
}
