@using System.IdentityModel.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService SessionStorageService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand">@username</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="categorypage">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Kategori Sayfası
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private string username = "Guest";

    [CascadingParameter]
    public Task<AuthenticationState> Authstate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                if (!String.IsNullOrEmpty(user.Claims.FirstOrDefault(c => c.Type == "unique_name")?.Value))
                {
                    username = user.Claims.FirstOrDefault(c => c.Type == "unique_name")?.Value;
                }
            }
           
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching authentication state: {ex.Message}");
        }
    }

    private bool collapseNavMenu = false;

    private string? NavMenuCssClass => collapseNavMenu ? "" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

